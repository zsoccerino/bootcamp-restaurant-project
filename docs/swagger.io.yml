swagger: '2.0'
info:
  description: This is a simple API
  version: 1.0.0
  title: Simple Inventory API
  # put the contact info for your development or API team
  contact:
    email: tomas.vorobjov@greenfoxacademy.com

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# tags are used for organizing operations
tags:
- name: admins
  description: secured admin only calls
- name: users
  description: The user management section
- name: teams
  description: The team management section
- name: roles
  description: The roles management section
- name: devs
  description: secured devs only class
- name: managers
  description: The items, categories and tags management section
- name: waiters
  description: The order management section

paths:
  /users:
    get:
      tags:
      - devs
      summary: returns a list of users
      operationId: UserController.index
      produces:
      - application/json
      responses:
        200:
          description: returns a list of users
          schema:
            type: array
            items:
              $ref: '#/definitions/com.gfa.users.dtos.UserResponseDto'
        401:
          description: unauthorized user
        403:
          description: insufficient rights to access the user list
        500:
          description: server error
    post:
      tags: 
      - admins
      - users
      summary: creates a new user
      operationId: UserController.create
      description: adds a user to the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: user
        description: the user data
        schema:
          $ref: '#/definitions/com.gfa.users.dtos.user.UserCreateRequestDto'
      responses:
        201:
          description: user created
          schema:
            $ref: '#/definitions/com.gfa.users.dtos.UserResponseDto'
        400:
          description: invalid input
        401:
          description: unauthorized user
        403:
          description: insufficient rights to create users
        409:
          description: user already exists
        500:
          description: server error
  /users/{id}:
    get:
      tags:
      - devs
      summary: returns the specified user data
      operationId: UserController.show
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: user id
        required: true
        type: integer
      responses:
        200:
          description: returns the data of the specified user
          schema:
            $ref: '#/definitions/com.gfa.users.dtos.UserResponseDto'
        401:
          description: unauthorized user
        403:
          description: insufficient rights to access the user data
        404:
          description: user not found
        500:
          description: server error
    patch:
      tags: 
      - admins
      - users
      summary: updates the specified user
      operationId: UserController.update
      description: updates the data of the specified user
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: user id
        required: true
        type: integer
      - name: user
        in: body
        description: the user data to update
        schema:
          $ref: '#/definitions/com.gfa.users.dtos.user.UserPatchRequestDto'
      responses:
        200:
          description: user updated
        400:
          description: invalid input
        401:
          description: unauthorized user
        403:
          description: insufficient rights to update users
        404:
          description: user not found
        500:
          description: server error
    delete:
      tags: 
      - admins
      - users
      summary: deletes the specified user 
      operationId: UserController.destroy
      description: >
        Deletes the specified user from the system. 

        *NOTE*: that this might be implemented as a [soft delete](https://www.baeldung.com/spring-jpa-soft-delete) 
        based on the `application.properties` settings
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: user id
        required: true
        type: integer
      responses:
        204:
          description: no content response is returned when a user is successfully deleted
        401:
          description: unauthorized user
        403:
          description: insufficient rights to delete the user
        404:
          description: user not found
        500:
          description: server error
  /users/{id}/permissions:
    get:
      tags:
      - devs
      summary: returns a list of user's permissions
      operationId: UserPermissionController.index
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: user id
        required: true
        type: integer
      responses:
        200:
          description: returns a list of user's permissions
          schema:
            type: array
            items:
              $ref: '#/definitions/com.gfa.users.dtos.PermissionResponseDto'
        401:
          description: unauthorized user
        403:
          description: insufficient rights to access the user permissions
        500:
          description: server error
    post:
      tags: 
      - admins
      - users
      summary: adds a permission to the specified user
      operationId: UserPermissionController.store
      description: >
        Adds the specified permission(s) to the given user
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: user id
        required: true
        type: integer
      - name: ability
        in: body
        description: the ability (permission) to add to the user
        schema:
          $ref: '#/definitions/com.gfa.users.dtos.PermissionRequestDto'
      responses:
        200:
          description: user permission added
        400:
          description: invalid input
        401:
          description: unauthorized user
        403:
          description: insufficient rights to permit users
        404:
          description: user not found
        500:
          description: server error
  /users/{id}/permissions/{permission_id}:
    delete:
      tags: 
      - admins
      - users
      summary: removes a permission from the specified user
      operationId: UserPermissionController.destroy
      description: >
        Removes the specified permission(s) from the given user
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: user id
        required: true
        type: integer
      - name: permission_id
        in: path
        description: permission id
        required: true
        type: integer
      responses:
        204:
          description: no content response is returned when a permission is successfully removed
        400:
          description: invalid input
        401:
          description: unauthorized user
        403:
          description: insufficient rights to prohibit user
        404:
          description: user not found | permission not found
        500:
          description: server error
  /users/{id}/roles/:
    get:
      tags:
      - devs
      summary: returns a list of user's roles
      operationId: UserRoleController.index
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: user id
        required: true
        type: integer
      responses:
        200:
          description: returns a list of user's roles
          schema:
            type: array
            items:
              $ref: '#/definitions/com.gfa.users.dtos.RoleResponseDto'
        401:
          description: unauthorized user
        403:
          description: insufficient rights to access the user roles
        500:
          description: server error
    post:
      tags: 
      - admins
      - users
      summary: adds a role to the specified user
      operationId: UserRolesController.store
      description: >
        Adds the specified role(s) to the given user
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: user id
        required: true
        type: integer
      - name: role
        in: body
        description: the role to add to the user
        schema:
          $ref: '#/definitions/com.gfa.users.dtos.RoleRequestDto'
      responses:
        200:
          description: user role added
        400:
          description: invalid input
        401:
          description: unauthorized user
        403:
          description: insufficient rights to add user roles
        404:
          description: user not found
        500:
          description: server error
  /users/{id}/roles/{role_id}:
    delete:
      tags: 
      - admins
      - users
      summary: removes a role from the specified user
      operationId: UserRoleController.destroy
      description: >
        Removes the specified role(s) from the given user
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: user id
        required: true
        type: integer
      - name: role_id
        in: path
        description: role id
        required: true
        type: integer
      responses:
        204:
          description: no content response is returned when a role is successfully removed
        400:
          description: invalid input
        401:
          description: unauthorized user
        403:
          description: insufficient rights to remove user roles
        404:
          description: user not found | role not found
        500:
          description: server error

  /teams:
    get:
      tags:
      - devs
      summary: returns a list of teams
      operationId: TeamController.index
      produces:
      - application/json
      responses:
        200:
          description: returns a list of teams
          schema:
            type: array
            items:
              $ref: '#/definitions/com.gfa.users.dtos.TeamResponseDto'
        401:
          description: unauthorized user
        403:
          description: insufficient rights to access the teams list
        500:
          description: server error
    post:
      tags: 
      - admins
      - teams
      summary: creates a new team
      operationId: TeamController.create
      description: adds a tean to the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: team
        description: the team data
        schema:
          $ref: '#/definitions/com.gfa.users.dtos.team.TeamCreateRequestDto'
      responses:
        201:
          description: user created
          schema:
            $ref: '#/definitions/com.gfa.users.dtos.TeamResponseDto'
        400:
          description: invalid input
        401:
          description: unauthorized user
        403:
          description: insufficient rights to create teams
        409:
          description: team already exists
        500:
          description: server error
  /teams/{id}:
    get:
      tags:
      - devs
      summary: returns the specified team data
      operationId: TeamController.show
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: team id
        required: true
        type: integer
      responses:
        200:
          description: returns the data of the specified team
          schema:
            $ref: '#/definitions/com.gfa.users.dtos.TeamResponseDto'
        401:
          description: unauthorized user
        403:
          description: insufficient rights to access the team data
        404:
          description: team not found
        500:
          description: server error
    patch:
      tags: 
      - admins
      - teams
      summary: updates the specified team
      operationId: TeamController.update
      description: updates the data of the specified team
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: team id
        required: true
        type: integer
      - name: team
        in: body
        description: the team data to update
        schema:
          $ref: '#/definitions/com.gfa.users.dtos.team.TeamPatchRequestDto'
      responses:
        200:
          description: team updated
        400:
          description: invalid input
        401:
          description: unauthorized user
        403:
          description: insufficient rights to update teams
        404:
          description: team not found
        500:
          description: server error
    delete:
      tags: 
      - admins
      - teams
      summary: deletes the specified team 
      operationId: TeamController.destroy
      description: >
        Deletes the specified team from the system. 

        *NOTE*: that this might be implemented as a [soft delete](https://www.baeldung.com/spring-jpa-soft-delete) 
        based on the `application.properties` settings
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: team id
        required: true
        type: integer
      responses:
        204:
          description: no content response is returned when a team is successfully deleted
        401:
          description: unauthorized user
        403:
          description: insufficient rights to delete the team
        404:
          description: team not found
        500:
          description: server error
  /teams/{id}/users:
    get:
      tags:
      - devs
      summary: returns a list of team users
      operationId: TeamUserController.index
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: team id
        required: true
        type: integer
      responses:
        200:
          description: returns a list of team users
          schema:
            type: array
            items:
              $ref: '#/definitions/com.gfa.users.dtos.UserResponseDto'
        401:
          description: unauthorized user
        403:
          description: insufficient rights to access the team users
        500:
          description: server error
    post:
      tags: 
      - admins
      - teams
      summary: adds a user to the specified team
      operationId: TeamUserController.store
      description: >
        Adds the specified user(s) to the given team
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: team id
        required: true
        type: integer
      - name: user
        in: body
        description: the user to add to the team
        schema:
          $ref: '#/definitions/com.gfa.users.dtos.UserRequestDto'
      responses:
        200:
          description: team user added
        400:
          description: invalid input
        401:
          description: unauthorized user
        403:
          description: insufficient rights to add team users
        404:
          description: team not found
        500:
          description: server error
  /teams/{id}/users/{user_id}:
    delete:
      tags: 
      - admins
      - teams
      summary: removes a user from the specified team
      operationId: TeamUserController.destroy
      description: >
        Removes the specified user(s) from the given team
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: team id
        required: true
        type: integer
      - name: user_id
        in: path
        description: user id
        required: true
        type: integer
      responses:
        200:
          description: team user removed
        400:
          description: invalid input
        401:
          description: unauthorized user
        403:
          description: insufficient rights to remove team users
        404:
          description: team not found | user not found
        500:
          description: server error
  /teams/{id}/permissions:
    get:
      tags:
      - devs
      summary: returns a list of team's permissions
      operationId: TeamPermissionController.index
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: team id
        required: true
        type: integer
      responses:
        200:
          description: returns a list of team's permissions
          schema:
            type: array
            items:
              $ref: '#/definitions/com.gfa.users.dtos.PermissionResponseDto'
        401:
          description: unauthorized user
        403:
          description: insufficient rights to access the team permissions
        500:
          description: server error
    post:
      tags: 
      - admins
      - teams
      summary: adds a permission to the specified team
      operationId: TeamPermissionController.store
      description: >
        Adds the specified permission(s) to the given team
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: team id
        required: true
        type: integer
      - name: ability
        in: body
        description: the ability (permission) to add to the team
        schema:
          $ref: '#/definitions/com.gfa.users.dtos.PermissionRequestDto'
      responses:
        200:
          description: team permission added
        400:
          description: invalid input
        401:
          description: unauthorized user
        403:
          description: insufficient rights to permit teams
        404:
          description: team not found
        500:
          description: server error
  /teams/{id}/permissions/{permission_id}:
    delete:
      tags: 
      - admins
      - teams
      summary: removes a permission from the specified team
      operationId: TeamPermissionController.destroy
      description: >
        Removes the specified permission(s) from the given team
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: team id
        required: true
        type: integer
      - name: permission_id
        in: path
        description: permission id
        required: true
        type: integer
      responses:
        204:
          description: no content response is returned when a permission is successfully removed
        400:
          description: invalid input
        401:
          description: unauthorized user
        403:
          description: insufficient rights to prohibit teams
        404:
          description: team not found | permission not found
        500:
          description: server error
  /teams/{id}/roles/:
    get:
      tags:
      - devs
      summary: returns a list of team's roles
      operationId: TeamRoleController.index
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: team id
        required: true
        type: integer
      responses:
        200:
          description: returns a list of team's roles
          schema:
            type: array
            items:
              $ref: '#/definitions/com.gfa.users.dtos.RoleResponseDto'
        401:
          description: unauthorized user
        403:
          description: insufficient rights to access the team roles
        500:
          description: server error
    post:
      tags: 
      - admins
      - teams
      summary: adds a role to the specifiedteamuser
      operationId: TeamRoleController.store
      description: >
        Adds the specified role(s) to the given team
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: team id
        required: true
        type: integer
      - name: role
        in: body
        description: the role to add to the team
        schema:
          $ref: '#/definitions/com.gfa.users.dtos.RoleRequestDto'
      responses:
        200:
          description: team role added
        400:
          description: invalid input
        401:
          description: unauthorized user
        403:
          description: insufficient rights to add team roles
        404:
          description: team not found
        500:
          description: server error
  /teams/{id}/roles/{role_id}:
    delete:
      tags: 
      - admins
      - teams
      summary: removes a role from the specified team
      operationId: TeamRoleController.destroy
      description: >
        Removes the specified role(s) from the given team
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: team id
        required: true
        type: integer
      - name: role_id
        in: path
        description: role id
        required: true
        type: integer
      responses:
        204:
          description: no content response is returned when a role is successfully removed
        400:
          description: invalid input
        401:
          description: unauthorized user
        403:
          description: insufficient rights to remove team roles
        404:
          description: team not found | role not found
        500:
          description: server error

  /roles:
    get:
      tags:
      - devs
      summary: returns a list of roles
      operationId: RoleController.index
      produces:
      - application/json
      responses:
        200:
          description: returns a list of roles
          schema:
            type: array
            items:
              $ref: '#/definitions/com.gfa.users.dtos.RoleResponseDto'
        401:
          description: unauthorized user
        403:
          description: insufficient rights to access the role list
        500:
          description: server error
    post:
      tags: 
      - admins
      - roles
      summary: creates a new role
      operationId: RoleController.create
      description: adds a user to the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: role
        description: the role data
        schema:
          $ref: '#/definitions/com.gfa.users.dtos.role.RoleCreateRequestDto'
      responses:
        201:
          description: role created
          schema:
            $ref: '#/definitions/com.gfa.users.dtos.RoleResponseDto'
        400:
          description: invalid input
        401:
          description: unauthorized user
        403:
          description: insufficient rights to create roles
        409:
          description: role already exists
        500:
          description: server error
  /roles/{id}:
    get:
      tags:
      - devs
      summary: returns the specified role data
      operationId: RoleController.show
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: role id
        required: true
        type: integer
      responses:
        200:
          description: returns the data of the specified role
          schema:
            $ref: '#/definitions/com.gfa.users.dtos.RoleResponseDto'
        401:
          description: unauthorized user
        403:
          description: insufficient rights to access the role data
        404:
          description: role not found
        500:
          description: server error
    patch:
      tags: 
      - admins
      - roles
      summary: updates the specified role
      operationId: RoleController.update
      description: updates the data of the specified role
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: role id
        required: true
        type: integer
      - name: role
        in: body
        description: the role data to update
        schema:
          $ref: '#/definitions/com.gfa.users.dtos.role.RolePatchRequestDto'
      responses:
        200:
          description: role updated
        400:
          description: invalid input
        401:
          description: unauthorized user
        403:
          description: insufficient rights to update roles
        404:
          description: role not found
        500:
          description: server error
    delete:
      tags: 
      - admins
      - roles
      summary: deletes the specified role 
      operationId: RoleController.destroy
      description: >
        Deletes the specified role from the system. 

        *NOTE*: that this might be implemented as a [soft delete](https://www.baeldung.com/spring-jpa-soft-delete) 
        based on the `application.properties` settings
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: role id
        required: true
        type: integer
      responses:
        204:
          description: no content response is returned when a role is successfully deleted
        401:
          description: unauthorized user
        403:
          description: insufficient rights to delete the role
        404:
          description: role not found
        500:
          description: server error
  /roles/{id}/permissions:
    get:
      tags:
      - devs
      summary: returns a list of role's permissions
      operationId: RolePermissionController.index
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: role id
        required: true
        type: integer
      responses:
        200:
          description: returns a list of role's permissions
          schema:
            type: array
            items:
              $ref: '#/definitions/com.gfa.users.dtos.PermissionResponseDto'
        401:
          description: unauthorized user
        403:
          description: insufficient rights to access the role permissions
        500:
          description: server error
    post:
      tags: 
      - admins
      - roles
      summary: adds a permission to the specified role
      operationId: RolePermissionController.store
      description: >
        Adds the specified permission(s) to the given role
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: role id
        required: true
        type: integer
      - name: ability
        in: body
        description: the ability (permission) to add to the role
        schema:
          $ref: '#/definitions/com.gfa.users.dtos.PermissionRequestDto'
      responses:
        200:
          description: role permission added
        400:
          description: invalid input
        401:
          description: unauthorized user
        403:
          description: insufficient rights to permit roles
        404:
          description: role not found
        500:
          description: server error
  /roles/{id}/permissions/{permission_id}:
    delete:
      tags: 
      - admins
      - roles
      summary: removes a permission from the specified role
      operationId: RolePermissionController.destroy
      description: >
        Removes the specified permission(s) from the given role
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: role id
        required: true
        type: integer
      - name: permission_id
        in: path
        description: permission id
        required: true
        type: integer
      responses:
        204:
          description: no content response is returned when a permission is successfully removed
        400:
          description: invalid input
        401:
          description: unauthorized user
        403:
          description: insufficient rights to prohibit teams
        404:
          description: role not found | permission not found
        500:
          description: server error

  /orders:
    get:
      tags:
      - waiters
      summary: returns a list of orders
      operationId: OrderController.index
      produces:
      - application/json
      responses:
        200:
          description: returns a list of orders
          schema:
            type: array
            items:
              $ref: '#/definitions/com.gfa.billing.dtos.OrderResponseDto'
        401:
          description: unauthorized user
        403:
          description: insufficient rights to access the orders list
        500:
          description: server error
    post:
      tags:
      - waiters
      summary: creates a new order
      operationId: OrderController.create
      description: adds an order to the system
      produces:
      - application/json
      responses:
        201:
          description: order created
          schema:
            $ref: '#/definitions/com.gfa.billing.dtos.OrderResponseDto'
        400:
          description: invalid input
        401:
          description: unauthorized user
        403:
          description: insufficient rights to create orders
        500:
          description: server error
  /orders/{id}:
    get:
      tags:
      - waiters
      summary: returns the specified order data
      operationId: OrderController.show
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: order id
        required: true
        type: integer
      responses:
        200:
          description: returns the data of the specified order
          schema:
            $ref: '#/definitions/com.gfa.billing.dtos.OrderResponseDto'
        401:
          description: unauthorized user
        403:
          description: insufficient rights to access the order data
        404:
          description: order not found
        500:
          description: server error
    patch:
      tags: 
      - waiters
      summary: updates the specified order
      operationId: OrderController.update
      description: updates the data of the specified order
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: order id
        required: true
        type: integer
      responses:
        200:
          description: order updated
        400:
          description: invalid input
        401:
          description: unauthorized user
        403:
          description: insufficient rights to update orders
        404:
          description: order not found
        500:
          description: server error
    delete:
      tags: 
      - waiters
      summary: deletes the specified order 
      operationId: OrderController.destroy
      description: >
        Deletes the specified order from the system. 

        *NOTE*: that this might be implemented as a [soft delete](https://www.baeldung.com/spring-jpa-soft-delete) 
        based on the `application.properties` settings
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: order id
        required: true
        type: integer
      responses:
        204:
          description: no content response is returned when an order is successfully deleted
        401:
          description: unauthorized user
        403:
          description: insufficient rights to delete the order
        404:
          description: order not found
        500:
          description: server error
  /orders/{id}/items:
    get:
      tags:
      - waiters
      summary: returns a list of order's items
      operationId: OrderItemController.index
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: order id
        required: true
        type: integer
      responses:
        200:
          description: returns a list of order's items
          schema:
            type: array
            items:
              $ref: '#/definitions/com.gfa.billing.dtos.BillableResponseDto'
        401:
          description: unauthorized user
        403:
          description: insufficient rights to access the order items
        500:
          description: server error
    post:
      tags: 
      - waiters
      summary: adds an item to the specified order
      operationId: OrderItemController.store
      description: >
        Adds the specified item(s) to the given order
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: order id
        required: true
        type: integer
      - name: item_id
        in: body
        description: the item (billable) to add to the order
        schema:
          $ref: '#/definitions/com.gfa.billing.dtos.BillableRequestDto'
      responses:
        200:
          description: order item added
        400:
          description: invalid input
        401:
          description: unauthorized user
        403:
          description: insufficient rights to add order items
        404:
          description: order not found | item not found
        500:
          description: server error
  /orders/{id}/items/{item_id}:
    get:
      tags:
      - waiters
      summary: returns the specified order item data
      operationId: OrderItemController.show
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: order id
        required: true
        type: integer
      - name: item_id
        in: path
        description: order item id
        required: true
        type: integer
      responses:
        200:
          description: returns the data of the specified order item
          schema:
            $ref: '#/definitions/com.gfa.billing.dtos.OrderItemResponseDto'
        401:
          description: unauthorized user
        403:
          description: insufficient rights to access the order item data
        404:
          description: order not found | order item not found
        500:
          description: server error
    patch:
      tags: 
      - waiters
      summary: updates the specified order item
      operationId: OrderItemController.update
      description: updates the data of the specified order item
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: order id
        required: true
        type: integer
      - name: item_id
        in: path
        description: order item id
        required: true
        type: integer
      - name: item
        in: body
        description: the item (billable) data to update
        schema:
          $ref: '#/definitions/com.gfa.billing.dtos.BillablePatchRequestDto'
      responses:
        200:
          description: order item updated
        400:
          description: invalid input
        401:
          description: unauthorized user
        403:
          description: insufficient rights to update order items
        404:
          description: order not found | order item not found
        500:
          description: server error
    delete:
      tags: 
      - waiters
      summary: removes an item from the specified order
      operationId: OrderItemController.destroy
      description: >
        Removes the specified item(s) from the given order
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: order id
        required: true
        type: integer
      - name: item_id
        in: path
        description: order item id
        required: true
        type: integer
      responses:
        204:
          description: no content response is returned when an order item is successfully removed
        400:
          description: invalid input
        401:
          description: unauthorized user
        403:
          description: insufficient rights to remove order items
        404:
          description: order not found | order item not found
        500:
          description: server error
  /orders/{id}/pay:
    post:
      tags: 
      - waiters
      summary: pays the specified order 
      operationId: OrderPayController.store
      description: >
        Sets the specified order as paid
      consumes:
      - application/json
      parameters:
      - name: id
        in: path
        description: order id
        required: true
        type: integer
      responses:
        200:
          description: order has been paid
        401:
          description: unauthorized user
        403:
          description: insufficient rights to pay an order
        404:
          description: order not found
        500:
          description: server error
  /orders/{id}/archive:
    post:
      tags: 
      - waiters
      summary: archives the specified order 
      operationId: OrderArchiveController.store
      description: >
        Sets the specified order as archived
      consumes:
      - application/json
      parameters:
      - name: id
        in: path
        description: order id
        required: true
        type: integer
      responses:
        200:
          description: order has been archive
        400:
          description: invalid input (e.g. order is not paid)
        401:
          description: unauthorized user
        403:
          description: insufficient rights to archive an order
        404:
          description: order not found
        500:
          description: server error

  /manage/items:
    get:
      tags:
      - managers
      summary: returns a list of billable items
      operationId: BillableItemController.index
      produces:
      - application/json
      responses:
        200:
          description: returns a list of billable items
          schema:
            type: array
            items:
              $ref: '#/definitions/com.gfa.billing.dtos.BillableResponseDto'
        401:
          description: unauthorized user
        403:
          description: insufficient rights to access billable items
        500:
          description: server error
    post:
      tags:
      - managers
      summary: creates a new billable item
      operationId: BillableItemController.create
      description: adds a billable item to the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: item
        description: the item data
        schema:
          $ref: '#/definitions/com.gfa.billing.dtos.BillableCreateRequestDto'
      responses:
        201:
          description: billable item created
          schema:
            $ref: '#/definitions/com.gfa.billing.dtos.BillableResponseDto'
        400:
          description: invalid input
        401:
          description: unauthorized user
        403:
          description: insufficient rights to create billable items
        409:
          description: item already exists
        500:
          description: server error
  /manage/items/{id}:
    get:
      tags:
      - managers
      summary: returns the specified billable item data
      operationId: BillableItemController.show
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: billable item id
        required: true
        type: integer
      responses:
        200:
          description: returns the data of the specified billable item
          schema:
            $ref: '#/definitions/com.gfa.billing.dtos.BillableResponseDto'
        401:
          description: unauthorized user
        403:
          description: insufficient rights to access the billable item data
        404:
          description: billable item not found
        500:
          description: server error
    patch:
      tags: 
      - managers
      summary: updates the specified billable item
      operationId: BillableItemController.update
      description: updates the data of the specified billable item
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: billable item id
        required: true
        type: integer
      responses:
        200:
          description: billable item updated
        400:
          description: invalid input
        401:
          description: unauthorized user
        403:
          description: insufficient rights to update billable items
        404:
          description: billable item not found
        500:
          description: server error
    delete:
      tags: 
      - managers
      summary: deletes the specified billable item 
      operationId: BillableItemController.destroy
      description: >
        Deletes the specified billable item from the system. 

        *NOTE*: that this might be implemented as a [soft delete](https://www.baeldung.com/spring-jpa-soft-delete) 
        based on the `application.properties` settings
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: billable item id
        required: true
        type: integer
      responses:
        204:
          description: no content response is returned when a billable item is successfully deleted
        401:
          description: unauthorized user
        403:
          description: insufficient rights to delete the billable item
        404:
          description: billable item not found
        500:
          description: server error
  /manage/tags:
    get:
      tags:
      - managers
      summary: returns a list of tags
      operationId: TagController.index
      produces:
      - application/json
      responses:
        200:
          description: returns a list of tags
          schema:
            type: array
            items:
              $ref: '#/definitions/com.gfa.billing.dtos.TagResponseDto'
        401:
          description: unauthorized user
        403:
          description: insufficient rights to access tags
        500:
          description: server error
    post:
      tags:
      - managers
      summary: creates a new tag
      operationId: TagController.create
      description: adds a tag to the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: tag
        description: the tag data
        schema:
          $ref: '#/definitions/com.gfa.billing.dtos.TagRequestDto'
      responses:
        201:
          description: tag created
          schema:
            $ref: '#/definitions/com.gfa.billing.dtos.TagResponseDto'
        400:
          description: invalid input
        401:
          description: unauthorized user
        403:
          description: insufficient rights to create tags
        409:
          description: tag already exists
        500:
          description: server error
  /manage/tags/{id}:
    get:
      tags:
      - managers
      summary: returns the specified tag data
      operationId: TagController.show
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: tag id
        required: true
        type: integer
      responses:
        200:
          description: returns the data of the specified tag
          schema:
            $ref: '#/definitions/com.gfa.billing.dtos.TagResponseDto'
        401:
          description: unauthorized user
        403:
          description: insufficient rights to access the tag data
        404:
          description: tag not found
        500:
          description: server error
    patch:
      tags: 
      - managers
      summary: updates the specified tag
      operationId: TagController.update
      description: updates the data of the specified tag
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: tag id
        required: true
        type: integer
      - in: body
        name: tag
        description: the tag data
        schema:
          $ref: '#/definitions/com.gfa.billing.dtos.TagRequestDto'
      responses:
        200:
          description: tag updated
        400:
          description: invalid input
        401:
          description: unauthorized user
        403:
          description: insufficient rights to update tags
        404:
          description: tag not found
        500:
          description: server error
    delete:
      tags: 
      - managers
      summary: deletes the specified tag 
      operationId: TagController.destroy
      description: >
        Deletes the specified tag from the system. 

        *NOTE*: that this might be implemented as a [soft delete](https://www.baeldung.com/spring-jpa-soft-delete) 
        based on the `application.properties` settings
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: tag id
        required: true
        type: integer
      responses:
        204:
          description: no content response is returned when a tag is successfully deleted
        401:
          description: unauthorized user
        403:
          description: insufficient rights to delete the tag
        404:
          description: tag not found
        500:
          description: server error
  /manage/categories:
    get:
      tags:
      - managers
      summary: returns a list of categories
      operationId: CategoryController.index
      produces:
      - application/json
      responses:
        200:
          description: returns a list of categories
          schema:
            type: array
            items:
              $ref: '#/definitions/com.gfa.billing.dtos.CategoryResponseDto'
        401:
          description: unauthorized user
        403:
          description: insufficient rights to access categories
        500:
          description: server error
    post:
      tags:
      - managers
      summary: creates a new tag
      operationId: CategoryController.create
      description: adds a category to the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: category
        description: the category data
        schema:
          $ref: '#/definitions/com.gfa.billing.dtos.CategoryRequestDto'
      responses:
        201:
          description: category created
          schema:
            $ref: '#/definitions/com.gfa.billing.dtos.CategoryResponseDto'
        400:
          description: invalid input
        401:
          description: unauthorized user
        403:
          description: insufficient rights to create categories
        409:
          description: category already exists
        500:
          description: server error
  /manage/categories/{id}:
    get:
      tags:
      - managers
      summary: returns the specified category data
      operationId: CategoryController.show
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: category id
        required: true
        type: integer
      responses:
        200:
          description: returns the data of the specified category
          schema:
            $ref: '#/definitions/com.gfa.billing.dtos.CategoryResponseDto'
        401:
          description: unauthorized user
        403:
          description: insufficient rights to access the category data
        404:
          description: category not found
        500:
          description: server error
    patch:
      tags: 
      - managers
      summary: updates the specified category
      operationId: CategoryController.update
      description: updates the data of the specified category
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: category id
        required: true
        type: integer
      - in: body
        name: category
        description: the category data
        schema:
          $ref: '#/definitions/com.gfa.billing.dtos.CategoryRequestDto'
      responses:
        200:
          description: category updated
        400:
          description: invalid input
        401:
          description: unauthorized user
        403:
          description: insufficient rights to update categories
        404:
          description: category not found
        500:
          description: server error
    delete:
      tags: 
      - managers
      summary: deletes the specified category 
      operationId: CategoryController.destroy
      description: >
        Deletes the specified category from the system. 

        *NOTE*: that this might be implemented as a [soft delete](https://www.baeldung.com/spring-jpa-soft-delete) 
        based on the `application.properties` settings
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: category id
        required: true
        type: integer
      responses:
        204:
          description: no content response is returned when a category is successfully deleted
        401:
          description: unauthorized user
        403:
          description: insufficient rights to delete the category
        404:
          description: category not found
        500:
          description: server error
  
  /manage/tables:
    get:
      tags:
      - managers
      summary: returns a list of tables
      operationId: TableController.index
      produces:
      - application/json
      responses:
        200:
          description: returns a list of tables
          schema:
            type: array
            items:
              $ref: '#/definitions/com.gfa.foxdining.dtos.TableResponseDto'
        401:
          description: unauthorized user
        403:
          description: insufficient rights to access tables
        500:
          description: server error
    post:
      tags:
      - managers
      summary: creates a new tag
      operationId: TableController.create
      description: adds a table to the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: table
        description: the table data
        schema:
          $ref: '#/definitions/com.gfa.foxdining.dtos.TableRequestDto'
      responses:
        201:
          description: table created
          schema:
            $ref: '#/definitions/com.gfa.foxdining.dtos.TableResponseDto'
        400:
          description: invalid input
        401:
          description: unauthorized user
        403:
          description: insufficient rights to create tables
        409:
          description: table already exists
        500:
          description: server error
  /manage/tables/{id}:
    get:
      tags:
      - managers
      summary: returns the specified table data
      operationId: TableController.show
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: table id
        required: true
        type: integer
      responses:
        200:
          description: returns the data of the specified table
          schema:
            $ref: '#/definitions/com.gfa.foxdining.dtos.TableResponseDto'
        401:
          description: unauthorized user
        403:
          description: insufficient rights to access the table data
        404:
          description: table not found
        500:
          description: server error
    patch:
      tags: 
      - managers
      summary: updates the specified table
      operationId: TableController.update
      description: updates the data of the specified table
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: table id
        required: true
        type: integer
      - in: body
        name: table
        description: the table data
        schema:
          $ref: '#/definitions/com.gfa.foxdining.dtos.TableRequestDto'
      responses:
        200:
          description: table updated
        400:
          description: invalid input
        401:
          description: unauthorized user
        403:
          description: insufficient rights to update tables
        404:
          description: table not found
        500:
          description: server error
    delete:
      tags: 
      - managers
      summary: deletes the specified table 
      operationId: TableController.destroy
      description: >
        Deletes the specified table from the system. 

        *NOTE*: that this might be implemented as a [soft delete](https://www.baeldung.com/spring-jpa-soft-delete) 
        based on the `application.properties` settings
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: table id
        required: true
        type: integer
      responses:
        204:
          description: no content response is returned when a table is successfully deleted
        401:
          description: unauthorized user
        403:
          description: insufficient rights to delete the table
        404:
          description: table not found
        500:
          description: server error
  
definitions:

  com.gfa.common.dtos.RequestDto:
    type: object
    description: abstract class; superclass for all request dtos
  com.gfa.common.dtos.ResponseDto:
    type: object
    description: abstract class; superclass for all response dtos
  com.gfa.common.dtos.IdRequestDto:
    type: object
    description: abstract class; superclass for all request dtos containing ids
    required:
    - id
    properties:
      id:
        type: integer
        format: int64
  com.gfa.common.dtos.AmountRequestDto:
    allOf:
      - $ref: '#/definitions/com.gfa.common.dtos.IdRequestDto'
      - type: object
        description: abstract class; superclass for all request dtos containing amounts
        required:
        - amount
        properties:
          amount:
            type: integer
            format: int32
  com.gfa.common.dtos.ErrorResponseDto:
    type: object
    description: class for sending error messages in the http response
    required:
    - message
    properties:
      message:
        type: string
        example: Insufficient privileges to manage users

  com.gfa.users.models.User:
    type: object
    required:
    - id
    - username
    - email
    - password
    - created_at
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
        example: johndoe
        description: unique
      email:
        type: string
        example: john.doe@example.com
        description: unique
      password: 
        type: string
        format: hash (bcrypt)
        example: $2a$12$W8UhkIukZX.XDJQiKXLZDe3.5agjCsFT1MDJInEpkSBt7UPaIT256
      verifiedAt:
        type: string
        format: date-time
        example: '2022-06-20T09:00:00.001Z'
      verificationToken:
        type: string
        format: hash
      verificationTokenExpiresAt:
        type: string
        format: date-time
        example: '2022-06-20T09:00:00.001Z'
      forgottenPasswordToken:
        type: string
        format: hash
      forgottenPasswordTokenExpiresAt:
        type: string
        format: date-time
        example: '2022-06-20T09:00:00.001Z'
      createdAt:
        type: string
        format: date-time
        example: '2022-06-20T09:00:00.001Z'
      permissions:
        type: array
        items:
          $ref: '#/definitions/com.gfa.users.models.Permission'
      roles:
        type: array
        items:
          $ref: '#/definitions/com.gfa.users.models.Role'
      teams:
        type: array
        items:
          $ref: '#/definitions/com.gfa.users.models.Team'
  com.gfa.users.models.Permission:
    type: object
    required:
    - id
    - ability
    properties:
      id:
        type: integer
        format: int64
      ability:
        type: string
        example: 'add items to the bill'
  com.gfa.users.models.Role:
    type: object
    required:
    - id
    - role
    properties:
      id:
        type: integer
        format: int64
      ability:
        type: string
        example: 'waiter'
  com.gfa.users.models.Team:
    type: object
    required:
    - id
    - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        example: waiters
        description: unique
      users:
        type: array
        items:
          $ref: '#/definitions/com.gfa.users.models.User'
      permissions:
        type: array
        items:
          $ref: '#/definitions/com.gfa.users.models.Permission'
      roles:
        type: array
        items:
          $ref: '#/definitions/com.gfa.users.models.Role'

  com.gfa.users.dtos.AbstractAbilityDto:
    allOf:
      - $ref: '#/definitions/com.gfa.common.dtos.IdRequestDto'
      - type: object
        properties:
          ability:
            type: string
  com.gfa.users.dtos.AbstractRoleDto:
    allOf:
      - $ref: '#/definitions/com.gfa.common.dtos.IdRequestDto'
      - type: object
        properties:
          role:
            type: string
  com.gfa.users.dtos.AbstractTeamDto:
    allOf:
      - $ref: '#/definitions/com.gfa.common.dtos.IdRequestDto'
      - type: object
        properties:
          name:
            type: string
  com.gfa.users.dtos.AbstractUserDto:
    allOf:
      - $ref: '#/definitions/com.gfa.common.dtos.IdRequestDto'
      - type: object
        properties:
          username:
            type: string

  com.gfa.users.dtos.PermissionRequestDto:
    allOf:
      - $ref: '#/definitions/com.gfa.users.dtos.AbstractAbilityDto'
  com.gfa.users.dtos.PermissionResponseDto:
    allOf:
      - $ref: '#/definitions/com.gfa.users.dtos.AbstractAbilityDto'
  com.gfa.users.dtos.RoleRequestDto:
    allOf:
      - $ref: '#/definitions/com.gfa.users.dtos.AbstractRoleDto'
      - type: object
        properties:
          role:
            type: string
  com.gfa.users.dtos.RoleResponseDto:
    allOf:
      - $ref: '#/definitions/com.gfa.users.dtos.AbstractRoleDto'
      - type: object
        properties:
          role:
            type: string
  com.gfa.users.dtos.TeamResponseDto:
    allOf:
      - $ref: '#/definitions/com.gfa.users.dtos.AbstractTeamDto'
  com.gfa.users.dtos.UserRequestDto:
    allOf:
      - $ref: '#/definitions/com.gfa.users.dtos.AbstractUserDto'
  com.gfa.users.dtos.UserResponseDto:
    allOf:
      - $ref: '#/definitions/com.gfa.users.dtos.AbstractUserDto'
      - type: object
        properties:
          email:
            type: string
            format: email
          verifiedAt:
            type: string
            format: date-time
          createdAt:
            type: string
            format: date-time

  com.gfa.users.dtos.user.UserCreateRequestDto:
    type: object
    required:
    - username
    - email
    - password
    properties:
      username:
        type: string
      email:
        type: string
        format: email
      password:
        type: string
  com.gfa.users.dtos.user.UserPatchRequestDto:
    type: object
    properties:
      username:
        type: string
      email:
        type: string
        format: email
      password:
        type: string
  com.gfa.users.dtos.team.TeamCreateRequestDto:
    type: object
    required:
    - name
    properties:
      name:
        type: string
  com.gfa.users.dtos.team.TeamPatchRequestDto:
    type: object
    properties:
      name:
        type: string
  com.gfa.users.dtos.role.RoleCreateRequestDto:
    type: object
    required:
    - role
    properties:
      role:
        type: string
  com.gfa.users.dtos.role.RolePatchRequestDto:
    type: object
    properties:
      role:
        type: string

  com.gfa.billing.models.Billable:
    type: object
    properties:
      getDescription():
        type: string
      getAmount():
        type: integer
        format: int32
      getUnitPrice():
        type: number
        format: double
  com.gfa.billing.models.Order:
    type: object
    properties:
      add(Billable):
        type: object
      remove(Billable):
        type: object
      items():
        type: array
        items:
          $ref: '#/definitions/com.gfa.billing.models.Billable'
      pay():
        type: object
      split(): 
        type: object
      getTotal():
        type: number
        format: double
  
  com.gfa.billing.dtos.AbstractBillableDto:
    allOf:
      - $ref: '#/definitions/com.gfa.common.dtos.AmountRequestDto'
      - type: object
        properties:
          description: 
            type: string
          amount:
            type: integer
            format: int32
          unitPrice:
            type: number
            format: double
  com.gfa.billing.dtos.BillableRequestDto:
    allOf:
      - $ref: '#/definitions/com.gfa.common.dtos.AmountRequestDto'
  com.gfa.billing.dtos.BillableResponseDto:
    allOf:
      - $ref: '#/definitions/com.gfa.billing.dtos.AbstractBillableDto'
  com.gfa.billing.dtos.BillableCreateRequestDto:
    allOf:
      - $ref: '#/definitions/com.gfa.billing.dtos.AbstractBillableDto'
  com.gfa.billing.dtos.BillablePatchRequestDto:
    allOf:
      - $ref: '#/definitions/com.gfa.common.dtos.AmountRequestDto'
      - type: object
        properties:
          amount:
            type: integer
            format: int32
          unitPrice:
            type: number
            format: double
  com.gfa.billing.dtos.OrderResponseDto:
    allOf:
      - $ref: '#/definitions/com.gfa.common.dtos.IdRequestDto'
      - type: object
        properties:
          items:
            type: array
            items:
              $ref: '#/definitions/com.gfa.billing.dtos.BillableResponseDto'
  com.gfa.billing.dtos.OrderItemResponseDto:
    allOf:
      - $ref: '#/definitions/com.gfa.common.dtos.IdRequestDto'
      - type: object
        properties:
          description:
            type: string
          amount:
            type: integer
            format: int32
          unitPrice:
            type: number
            format: double

  com.gfa.billing.dtos.AbstractTagResponseDto:
    allOf:
      - $ref: '#/definitions/com.gfa.common.dtos.IdRequestDto'
      - type: object
        properties:
          tag: 
            type: string
  com.gfa.billing.dtos.TagRequestDto:
    allOf:
      - $ref: '#/definitions/com.gfa.billing.dtos.AbstractTagResponseDto'
  com.gfa.billing.dtos.TagResponseDto:
    allOf:
      - $ref: '#/definitions/com.gfa.billing.dtos.AbstractTagResponseDto'

  com.gfa.billing.dtos.AbstractCategoryResponseDto:
    allOf:
      - $ref: '#/definitions/com.gfa.common.dtos.IdRequestDto'
      - type: object
        properties:
          category: 
            type: string
  com.gfa.billing.dtos.CategoryRequestDto:
    allOf:
      - $ref: '#/definitions/com.gfa.billing.dtos.AbstractCategoryResponseDto'
  com.gfa.billing.dtos.CategoryResponseDto:
    allOf:
      - $ref: '#/definitions/com.gfa.billing.dtos.AbstractCategoryResponseDto'

  com.gfa.booking.models.Bookable:
    type: object
    description: >
      extends `com.gfa.billing.models.Billable`
    properties:
      getStartDate():
        type: string
        format: date-time
      getEndDate():
        type: string
        format: date-time
  com.gfa.booking.models.Reservation:
    type: object
    properties:
      add(Bookable):
        type: object
      remove(Bookable):
        type: object
      items():
        type: array
        items:
          $ref: '#/definitions/com.gfa.booking.models.Bookable'
      pay():
        type: object
      split(): 
        type: object
      getTotal():
        type: number
        format: double
  com.gfa.booking.dtos.BookableRequestDto:
    allOf:
      - $ref: '#/definitions/com.gfa.common.dtos.AmountRequestDto'

  com.gfa.foxdining.models.Table:
    type: object
    description: >
      extends `com.gfa.booking.models.Bookable`
    properties:
      description:
        type: string
      capacity:
        type: integer
        format: int32
      order:
        $ref: '#/definitions/com.gfa.billing.models.Order'
  com.gfa.foxdining.dtos.AbstractTableDto:
    allOf:
      - $ref: '#/definitions/com.gfa.common.dtos.IdRequestDto'
      - type: object
        properties:
          description: 
            type: string
          capacity:
            type: integer
            format: int32
  com.gfa.foxdining.dtos.TableRequestDto:
    allOf:
      - $ref: '#/definitions/com.gfa.foxdining.dtos.AbstractTableDto'
  com.gfa.foxdining.dtos.TableResponseDto:
    allOf:
      - $ref: '#/definitions/com.gfa.foxdining.dtos.AbstractTableDto'
      - type: object
        properties:
          order:
            $ref: '#/definitions/com.gfa.billing.models.Order'

# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /fox-dining/fox-dining/1.0.0
# schemes:
#  - http
# Added by API Auto Mocking Plugin
# schemes:
#  - http
# Added by API Auto Mocking Plugin
schemes:
 - https